package `3_oop`

// Basic class with a primary constructor and default property values
class Person(val name: String, var age: Int = 18) {
    init {
        peopleCount++
    }

    fun greet() {
        println("Hello, my name is $name and I am $age years old.")
    }

    companion object {
        private var peopleCount = 0
        fun getPeopleCount() = peopleCount
    }
}

// Data class for simple data storage with autogenerated functions
data class Customer(val name: String, val email: String)


// Singleton object, which holds application-wide settings
object SettingConfig {
    var url: String = "https://example.com"
    fun updateUrl(newUrl: String) {
        url = newUrl
    }
}

abstract class Manager {
    abstract fun sound()
}

// Class with secondary constructor and late initialization of properties
class Employee {
    private lateinit var firstName: String
    private lateinit var lastName: String
    private lateinit var role: String


    fun getInfo() {
        if (this::firstName.isInitialized) {
            println("Person: $firstName $lastName, Role: $role")
        } else {
            println("Person information not yet initialized.")
        }
    }
}

// Main function to demonstrate usage of these structures
fun main() {
    // Basic class usage
    val person1 = Person("Alice", 25)
    person1.greet()

    val person2 = Person("Bob")
    person2.greet()

    // Using the data class
    val customer = Customer("David", "david@example.com")
    // Deconstruction with ComponentN()
    val (name, email) = customer
    println("This ${Customer::class.simpleName} is called $name, contact them via $email")
    // Data classes are equip with equals, toString, hashcode, copy and ComponentN funcs
    val customerTwo = customer.copy(email = "DavidTwo@email.com")

    // Using the Settings singleton object
    println(SettingConfig.url)
    SettingConfig.updateUrl("https://new.example.com")
    println(SettingConfig.url)

    // Companion object demonstration
    println("Total people created: ${Person.getPeopleCount()}")
}
